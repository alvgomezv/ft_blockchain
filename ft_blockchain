#!/goinfre/alvgomez/miniconda3/envs/42cyber-alvgomez/bin/python

import time
import hashlib
import json
from flask import Flask, jsonify

block = {
    'index': 4,
    'timestamp': 1644045050.00042,
    'transactions': [{
        'sender': '4c6e7e2a9f2f7f7ff8e7d3d6c8b7c6e8e23a7',
        'recipient': 'b3c6e7e2a9f2f7f7ff8e7d3d6c8b7c6e8e23a7',
        'amount': 42}],
    'proof': 324984774000,
    'previous_hash':'084c799cd551dd1d8d5c5f9a5d593b2e931f5e36122ee5c793c1d08a19839cc0',
}

class Blockchain:
    def __init__(self):
        self.chain = []
        self.transactions = []
        self.create_block(transaction=None, proof=1, previous_hash='0')

    def create_block(self, transaction, proof, previous_hash):
        block = {
            'index': len(self.chain) + 1,
            'timestamp': str(time.time()),
            'transactions': transaction,
            'proof': proof,
            'previous_hash':previous_hash
        }
        self.transactions = []
        self.chain.append(block)
        return block
    
    def add_transaction(self, sender, recipient, amount):
        self.transaction.append({"sender":sender,
                                 "recipient":recipient,
                                 "amount":amount})
        previous_block = self.get_previous_block()
        return previous_block['index']+1

    def get_previous_block(self):
        return self.chain[-1]
    
    def proof_of_work(self, previous_proof):
        new_proof = 1
        check_proof = False
        while check_proof is not True:
            hash = hashlib.sha256(str(new_proof ** 2 - previous_proof ** 2).encode()).hexdigest()
            if hash[:4] == '4242':
                check_proof = True
            else:
                new_proof += 1
        return new_proof
    
    def hash(self, block):
        encoded_block = json.dumps(block, sort_keys=True).encode()
        hash = hashlib.sha256(encoded_block).hexdigest()
        return hash
    
    def is_chain_valid(self, chain):
        previous_block = chain[0]
        block_index = 1
        while block_index < len(chain):
            block = chain[block_index]
            if block['previous_hash'] != self.hash(previous_block):
                return False
            previous_proof = previous_block['proof']
            proof = block['proof']
            hash = hashlib.sha256(str(proof ** 2 - previous_proof ** 2).encode()).hexdigest()
            if hash[:4] != '4242':
                return False
            previous_block = block
            block_index += 1
        return True
    
def mine_block(blockchain):
    previous_block = blockchain.get_previous_block()
    previous_proof = previous_block['proof']
    proof = blockchain.proof_of_work(previous_proof)
    previous_hash = blockchain.hash(previous_block)
    block = blockchain.create_block(proof, previous_hash)
    response = {"message":"Blocked mined!!", 
                "index":block['index'], 
                "timestamp":block['timestamp'],
                "proof":block['proof'],
                "previous_hash":block['previous_hash']}
    #return jsonify(response), 200
    return response

def get_chain(blockchain):
    response = {"chain":blockchain.chain,
                "length":len(blockchain.chain)}
    return response

if __name__ == "__main__":
    blockchain = Blockchain()
