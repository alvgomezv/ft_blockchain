#!/goinfre/alvgomez/miniconda3/envs/42cyber-alvgomez/bin/python

import os
import time
import hashlib
import json
from flask import Flask, jsonify, request, render_template, redirect, url_for, flash
import requests
from uuid import uuid4
from urllib.parse import urlparse
from blockchain import Blockchain
    
app = Flask(__name__)
blockchain = Blockchain()

#We generate a unique random address for the node
#node_address = str(uuid4()).replace('-', '')

app.secret_key = os.urandom(32)

@app.route("/mine")
def mine():
    previous_block = blockchain.get_previous_block()
    previous_proof = previous_block['proof']
    proof = blockchain.proof_of_work(previous_proof)
    previous_hash = blockchain.hash(previous_block)
    blockchain.add_transaction(sender="System reward", recipient="Alvaro", amount=1)
    block = blockchain.create_block(proof, previous_hash)
    response = {"message":"Blocked mined!!", 
                "index":block['index'], 
                "timestamp":block['timestamp'],
                "transactions":block['transactions'],
                "proof":block['proof'],
                "previous_hash":block['previous_hash']}
    return jsonify(response), 200

@app.route("/chain")
def chain():
    response = {"chain":blockchain.chain,
                "pending transactions":blockchain.transactions,
                "length":len(blockchain.chain)}
    return jsonify(response)

@app.route("/is_valid")
def is_valid():
    is_valid = blockchain.is_chain_valid(blockchain.chain)
    if is_valid:
        message = "is valid"
        return render_template("is_valid.html", message=message)
    else:
        message = "is not valid"
        return render_template("is_valid.html", message=message)

@app.route("/transaction/new", methods=['GET','POST'])
def new_transaction():
    if request.method == 'POST':
        sender = request.form.get('sender')
        recipient = request.form.get('recipient')
        amount = request.form.get('amount')
        if not sender or not recipient or not amount:
            flash("Missing elements", category="error")
        else:
            index = blockchain.add_transaction(sender, recipient, amount)
            flash(f"Transaction added at block {index}", category="success")
    return render_template("new_transaction.html")

'''

@app.route("/connect_node", methods=['POST'])
def connect_node():
    json = request.get_json()
    nodes = json.get('nodes')
    if nodes is None:
        return "No node", 401
    for node in nodes:
        blockchain.add_node(node)
    response = {"message":"All nodes are connected",
                "total_nodes":list(blockchain.nodes)}
    return jsonify(response), 201

@app.route("/replace_chain")
def replace_chain():
    is_chain_replaced = blockchain.replace_chain()
    if is_chain_replaced:
        response = {"message":"Nodes had different chains, chain was replaced for the longest one",
                    "new_chain":blockchain.chain}
        return jsonify(response), 200
    else:
        response = {"message":"All good, chain was the longest",
                    "actual_chain":blockchain.chain}
        return jsonify(response), 200

'''

@app.route("/")
def home():
    return render_template("index.html", name="Alvaro")

if __name__ == "__main__":
    app.run(debug=True, port=8000)
